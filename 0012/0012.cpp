//Highly divisible triangular number
//Problem 12
//
//The sequence of triangle numbers is generated by adding the natural numbers. 
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
//The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28
//
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

#include <iostream>

int main()
{
	int triNumber = 0;
	int prevTriNumber = 0;
	const int divAm = 500;
	int currDivAm = 0;
	int currNum = 1;
	for (;;)
	{
		currDivAm = 3;
		triNumber = prevTriNumber + currNum;
		prevTriNumber = triNumber;
		currNum++;
		
		if (triNumber % 2 != 0)
			continue;
		
		for (int k = 3; k < triNumber / 2 + 1; k++)
			if (triNumber % k == 0)
				currDivAm++;
		
		if (currDivAm >= divAm)
			break;
	}
	
	std::cout << "currDivAm: " << currDivAm << " triNumber: " << triNumber << " currNum: " << currNum << "\n";
	std::cout << "Result: " << triNumber << "\n";
	
	return 0;
}
